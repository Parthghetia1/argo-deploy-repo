steps:
  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/frontend:latest'
      - '.'
  # - id: 'scan'
  #   name: gcr.io/google.com/cloudsdktool/cloud-sdk
  #   entrypoint: /bin/bash
  #   args:
  #   - -c
  #   - |
  #     gcloud artifacts docker images scan gcr.io/$PROJECT_ID/frontend:latest \
  #     --format='value(response.scan)' > ./scan_id.txt | echo ./scan_id.txt
  # - id: 'severity check'
  #   name: gcr.io/google.com/cloudsdktool/cloud-sdk
  #   entrypoint: /bin/bash
  #   args:
  #   - -c
  #   - |
  #     gcloud artifacts docker images list-vulnerabilities $(cat ./scan_id.txt) \
  #     --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq CRITICAL; \
  #     then echo 'Failed vulnerability check' && exit 1; else echo 'No crazy vulnerabilities found' exit 0; fi
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/frontend:latest'

  # - id: 'build-attestation-image'
  #   name: 'gcr.io/cloud-builders/docker'
  #   args:
  #     - 'build'
  #     - '-t'
  #     - 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
  #     - './binary-auth/'
  # - id: 'publish-binary-auth-image'
  #   name: 'gcr.io/cloud-builders/docker'
  #   args:
  #     - 'push'
  #     - 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
  # - id: 'create-attestation'
  #   name: 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
  #   args:
  #     - '--artifact-url'
  #     - 'gcr.io/$PROJECT_ID/frontend:latest'
  #     - '--attestor'
  #     - 'projects/$PROJECT_ID/attestors/${_ATTESTOR_NAME}'
  #     - '--keyversion'
  #     - 'projects/${PROJECT_ID}/locations/global/keyRings/"$KEY_RING"/cryptoKeys/${_ATTESTOR_KEY}/cryptoKeyVersions/1'
  #   secretEnv: ['KEY_RING']
  # This step clones the hello-cloudbuild-env repository
  - id: 'get-image-checksum'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: /bin/bash
    args: 
    - -c
    - |
      gcloud container images describe gcr.io/$PROJECT_ID/frontend:latest \
      --format 'value(image_summary.digest)' > ./checksum.txt | echo ./checksum.txt
  # This step generates the new manifest
  
  # This step pushes the manifest back to hello-cloudbuild-env
  - name: 'gcr.io/google-samples/cloudbuild-kustomize:latest'
    id: push-manifest
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      git clone https://github.com/$$GITHUB_USERNAME/config-source
      sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" frontend.yaml.tpl | \
      sed "s/COMMIT_SHA/$(cat ./checksum.txt)/g" > kustomization.yaml
      cat kustomization.yaml


      cp kustomization.yaml config-source/overlays/dev
      
      cd config-source/overlays/dev
      git config user.email $$GITHUB_EMAIL
      git config user.name $$GITHUB_USERNAME
      git remote set-url origin https://$$GITHUB_USERNAME:$$GITHUB_TOKEN@github.com/$$GITHUB_USERNAME/config-source.git

      
      
      
      git add kustomization.yaml && \
      git commit -m "Deploying image gcr.io/$PROJECT_ID/frontend:${COMMIT_SHA}" && \
      git push origin main
    secretEnv: ['GITHUB_EMAIL', 'GITHUB_USERNAME', 'GITHUB_TOKEN']
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/github-username/versions/1 
    env: 'GITHUB_USERNAME'
  - versionName: projects/${PROJECT_ID}/secrets/github-token/versions/2
    env: 'GITHUB_TOKEN'
  - versionName: projects/${PROJECT_ID}/secrets/github-email/versions/1 
    env: 'GITHUB_EMAIL'